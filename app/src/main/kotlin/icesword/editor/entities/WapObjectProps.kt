package icesword.editor.entities

import icesword.frp.MutCell
import icesword.geometry.IntRect
import icesword.geometry.IntVec2
import icesword.wwd.DataStreamObj.ByteString
import icesword.wwd.Wwd
import kotlinx.serialization.Serializable

class WapObjectProps(
    initialProps: WapObjectPropsData,
) {
    val id = MutCell(initialProps.id)
    val name = MutCell(initialProps.name)
    val logic = MutCell(initialProps.logic)
    val imageSet = MutCell(initialProps.imageSet)
    val animation = MutCell(initialProps.animation)
    val x = MutCell(initialProps.x)
    val y = MutCell(initialProps.y)
    val z = MutCell(initialProps.z)
    val i = MutCell(initialProps.i)
    val addFlags = MutCell(initialProps.addFlags)
    val dynamicFlags = MutCell(initialProps.dynamicFlags)
    val drawFlags = MutCell(initialProps.drawFlags)
    val userFlags = MutCell(initialProps.userFlags)
    val score = MutCell(initialProps.score)
    val points = MutCell(initialProps.points)
    val powerUp = MutCell(initialProps.powerUp)
    val damage = MutCell(initialProps.damage)
    val smarts = MutCell(initialProps.smarts)
    val health = MutCell(initialProps.health)
    val rangeRect = MutCell(initialProps.rangeRect)
    val moveRect = MutCell(initialProps.moveRect)
    val hitRect = MutCell(initialProps.hitRect)
    val attackRect = MutCell(initialProps.attackRect)
    val clipRect = MutCell(initialProps.clipRect)
    val userRect1 = MutCell(initialProps.userRect1)
    val userRect2 = MutCell(initialProps.userRect2)
    val userValue1 = MutCell(initialProps.userValue1)
    val userValue2 = MutCell(initialProps.userValue2)
    val userValue3 = MutCell(initialProps.userValue3)
    val userValue4 = MutCell(initialProps.userValue4)
    val userValue5 = MutCell(initialProps.userValue5)
    val userValue6 = MutCell(initialProps.userValue6)
    val userValue7 = MutCell(initialProps.userValue7)
    val userValue8 = MutCell(initialProps.userValue8)
    val speedX = MutCell(initialProps.speedX)
    val speedY = MutCell(initialProps.speedY)
    val xTweak = MutCell(initialProps.xTweak)
    val yTweak = MutCell(initialProps.yTweak)
    val counter = MutCell(initialProps.counter)
    val speed = MutCell(initialProps.speed)
    val width = MutCell(initialProps.width)
    val height = MutCell(initialProps.height)
    val direction = MutCell(initialProps.direction)
    val faceDir = MutCell(initialProps.faceDir)
    val timeDelay = MutCell(initialProps.timeDelay)
    val frameDelay = MutCell(initialProps.frameDelay)
    val objectType = MutCell(initialProps.objectType)
    val hitTypeFlags = MutCell(initialProps.hitTypeFlags)
    val xMoveRes = MutCell(initialProps.xMoveRes)
    val yMoveRes = MutCell(initialProps.yMoveRes)

    fun toData(): WapObjectPropsData = WapObjectPropsData(
        id = this.id.sample(),
        name = this.name.sample(),
        logic = this.logic.sample(),
        imageSet = this.imageSet.sample(),
        animation = this.animation.sample(),
        x = this.x.sample(),
        y = this.y.sample(),
        z = this.z.sample(),
        i = this.i.sample(),
        addFlags = this.addFlags.sample(),
        dynamicFlags = this.dynamicFlags.sample(),
        drawFlags = this.drawFlags.sample(),
        userFlags = this.userFlags.sample(),
        score = this.score.sample(),
        points = this.points.sample(),
        powerUp = this.powerUp.sample(),
        damage = this.damage.sample(),
        smarts = this.smarts.sample(),
        health = this.health.sample(),
        rangeRect = this.rangeRect.sample(),
        moveRect = this.moveRect.sample(),
        hitRect = this.hitRect.sample(),
        attackRect = this.attackRect.sample(),
        clipRect = this.clipRect.sample(),
        userRect1 = this.userRect1.sample(),
        userRect2 = this.userRect2.sample(),
        userValue1 = this.userValue1.sample(),
        userValue2 = this.userValue2.sample(),
        userValue3 = this.userValue3.sample(),
        userValue4 = this.userValue4.sample(),
        userValue5 = this.userValue5.sample(),
        userValue6 = this.userValue6.sample(),
        userValue7 = this.userValue7.sample(),
        userValue8 = this.userValue8.sample(),
        speedX = this.speedX.sample(),
        speedY = this.speedY.sample(),
        xTweak = this.xTweak.sample(),
        yTweak = this.yTweak.sample(),
        counter = this.counter.sample(),
        speed = this.speed.sample(),
        width = this.width.sample(),
        height = this.height.sample(),
        direction = this.direction.sample(),
        faceDir = this.faceDir.sample(),
        timeDelay = this.timeDelay.sample(),
        frameDelay = this.frameDelay.sample(),
        objectType = this.objectType.sample(),
        hitTypeFlags = this.hitTypeFlags.sample(),
        xMoveRes = this.xMoveRes.sample(),
        yMoveRes = this.yMoveRes.sample(),
    )
}

@Serializable
data class WapObjectPropsData(
    val id: Int = 0,
    val name: String = "",
    val logic: String = "",
    val imageSet: String = "",
    val animation: String = "",
    val x: Int = 0,
    val y: Int = 0,
    val z: Int = 0,
    val i: Int = 0,
    val addFlags: Int = 0,
    val dynamicFlags: Int = 0,
    val drawFlags: Int = 0,
    val userFlags: Int = 0,
    val score: Int = 0,
    val points: Int = 0,
    val powerUp: Int = 0,
    val damage: Int = 0,
    val smarts: Int = 0,
    val health: Int = 0,
    val rangeRect: IntRect = IntRect.ZERO,
    val moveRect: IntRect = IntRect.ZERO,
    val hitRect: IntRect = IntRect.ZERO,
    val attackRect: IntRect = IntRect.ZERO,
    val clipRect: IntRect = IntRect.ZERO,
    val userRect1: IntRect = IntRect.ZERO,
    val userRect2: IntRect = IntRect.ZERO,
    val userValue1: Int = 0,
    val userValue2: Int = 0,
    val userValue3: Int = 0,
    val userValue4: Int = 0,
    val userValue5: Int = 0,
    val userValue6: Int = 0,
    val userValue7: Int = 0,
    val userValue8: Int = 0,
    val speedX: Int = 0,
    val speedY: Int = 0,
    val xTweak: Int = 0,
    val yTweak: Int = 0,
    val counter: Int = 0,
    val speed: Int = 0,
    val width: Int = 0,
    val height: Int = 0,
    val direction: Int = 0,
    val faceDir: Int = 0,
    val timeDelay: Int = 0,
    val frameDelay: Int = 0,
    val objectType: Int = 0,
    val hitTypeFlags: Int = 0,
    val xMoveRes: Int = 0,
    val yMoveRes: Int = 0,
) {
    companion object {
        fun fromWwdObject(wwdObject: Wwd.Object_) = WapObjectPropsData(
            id = wwdObject.id,
            name = wwdObject.name.decode(),
            logic = wwdObject.logic.decode(),
            imageSet = wwdObject.imageSet.decode(),
            animation = wwdObject.animation.decode(),
            x = wwdObject.x,
            y = wwdObject.y,
            z = wwdObject.z,
            i = wwdObject.i,
            addFlags = wwdObject.addFlags,
            dynamicFlags = wwdObject.dynamicFlags,
            drawFlags = wwdObject.drawFlags,
            userFlags = wwdObject.userFlags,
            score = wwdObject.score,
            points = wwdObject.points,
            powerUp = wwdObject.powerUp,
            damage = wwdObject.damage,
            smarts = wwdObject.smarts,
            health = wwdObject.health,
            rangeRect = IntRect.fromRectangle(wwdObject.rangeRect),
            moveRect = IntRect.fromRectangle(wwdObject.moveRect),
            hitRect = IntRect.fromRectangle(wwdObject.hitRect),
            attackRect = IntRect.fromRectangle(wwdObject.attackRect),
            clipRect = IntRect.fromRectangle(wwdObject.clipRect),
            userRect1 = IntRect.fromRectangle(wwdObject.userRect1),
            userRect2 = IntRect.fromRectangle(wwdObject.userRect2),
            userValue1 = wwdObject.userValue1,
            userValue2 = wwdObject.userValue2,
            userValue3 = wwdObject.userValue3,
            userValue4 = wwdObject.userValue4,
            userValue5 = wwdObject.userValue5,
            userValue6 = wwdObject.userValue6,
            userValue7 = wwdObject.userValue7,
            userValue8 = wwdObject.userValue8,
            speedX = wwdObject.speedX,
            speedY = wwdObject.speedY,
            xTweak = wwdObject.xTweak,
            yTweak = wwdObject.yTweak,
            counter = wwdObject.counter,
            speed = wwdObject.speed,
            width = wwdObject.width,
            height = wwdObject.height,
            direction = wwdObject.direction,
            faceDir = wwdObject.faceDir,
            timeDelay = wwdObject.timeDelay,
            frameDelay = wwdObject.frameDelay,
            objectType = wwdObject.objectType,
            hitTypeFlags = wwdObject.hitTypeFlags,
            xMoveRes = wwdObject.xMoveRes,
            yMoveRes = wwdObject.yMoveRes,
        )
    }

    val position: IntVec2
        get() = IntVec2(x, y)

    fun toWwdObject(): Wwd.Object_ = Wwd.Object_(
        id = this.id,
        name = ByteString.encode(this.name),
        logic = ByteString.encode(this.logic),
        imageSet = ByteString.encode(this.imageSet),
        animation = ByteString.encode(this.animation),
        x = this.x,
        y = this.y,
        z = this.z,
        i = this.i,
        addFlags = this.addFlags,
        dynamicFlags = this.dynamicFlags,
        drawFlags = this.drawFlags,
        userFlags = this.userFlags,
        score = this.score,
        points = this.points,
        powerUp = this.powerUp,
        damage = this.damage,
        smarts = this.smarts,
        health = this.health,
        rangeRect = this.rangeRect.toRectangle(),
        moveRect = this.moveRect.toRectangle(),
        hitRect = this.hitRect.toRectangle(),
        attackRect = this.attackRect.toRectangle(),
        clipRect = this.clipRect.toRectangle(),
        userRect1 = this.userRect1.toRectangle(),
        userRect2 = this.userRect2.toRectangle(),
        userValue1 = this.userValue1,
        userValue2 = this.userValue2,
        userValue3 = this.userValue3,
        userValue4 = this.userValue4,
        userValue5 = this.userValue5,
        userValue6 = this.userValue6,
        userValue7 = this.userValue7,
        userValue8 = this.userValue8,
        speedX = this.speedX,
        speedY = this.speedY,
        xTweak = this.xTweak,
        yTweak = this.yTweak,
        counter = this.counter,
        speed = this.speed,
        width = this.width,
        height = this.height,
        direction = this.direction,
        faceDir = this.faceDir,
        timeDelay = this.timeDelay,
        frameDelay = this.frameDelay,
        objectType = this.objectType,
        hitTypeFlags = this.hitTypeFlags,
        xMoveRes = this.xMoveRes,
        yMoveRes = this.yMoveRes,
    )
}